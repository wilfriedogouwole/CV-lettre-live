// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id
  email        String        @unique
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  cvs          CV[]
  letters      CoverLetter[]
  applications JobApplication[]
  kanbanCards  KanbanCard[]
  subscription Subscription?
  credits      Credits?
}

model Credits {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cvCredits     Int      @default(1)
  letterCredits Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


model Subscription {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId   String   @unique
  stripePriceId      String?
  stripeSubscriptionId String?
  status             String   @default("inactive")
  plan               String   @default("free")
  currentPeriodStart DateTime @default(now())
  currentPeriodEnd   DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model CV {
  id          String   @id @default(cuid())
  title       String
  templateId  String   @default("template1")
  content     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobPosition String?
  company     String?

  @@index([templateId])
}

model CoverLetter {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  templateId  String   @default("template1")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobPosition String?
  company     String?
}

model Job {
  id           String   @id @default(cuid())
  title        String
  company      String
  location     String
  description  String   @db.Text
  salary       String?
  type         String?
  url          String
  source       String
  createdAt    DateTime @default(now())
  applications JobApplication[]
  
  @@index([title])
  @@index([company])
  @@index([location])
}

model JobApplication {
  id            String   @id @default(cuid())
  jobId         String
  userId        String
  cvId          String?
  letterTitle   String?
  letterContent String?  @db.Text
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  job           Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([jobId, userId])
}

model KanbanCard {
  id           String   @id @default(cuid())
  title        String
  company      String
  location     String   @default("")
  contractType String   @default("")
  status       String   // 'wishlist', 'applied', 'followup', 'interview','finished'
  date         DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}